.PHONY: clean compile_translations coverage docs dummy_translations extract_translations \
	fake_translations help pull_translations push_translations quality requirements test test-all validate

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

coverage: clean ## generate and view HTML coverage report
	@echo "Not implemented"
	# py.test --cov-report html
	# $(BROWSER) htmlcov/index.html

docs: ## generate Sphinx HTML documentation, including API docs
	@echo "Not implemented"
	# tox -e docs
	# $(BROWSER) docs/_build/html/index.html

dummy_translations: ## generate dummy translation (.po) files
	@echo "Not implemented"
	# cd openedx_email_extensions && i18n_tool dummy

extract_translations: ## extract strings to be translated, outputting .mo files
	pybabel extract -F openedx_email_extensions/locale/babel.cfg -o openedx_email_extensions/locale/django.pot .
	pybabel update -N -i openedx_email_extensions/locale/django.pot
	rm openedx_email_extensions/locale/django.pot

compile_translations: ## compile .mo files into .po files
	pybabel compile -D django -d openedx_email_extensions/locale/

create_translations_catalogs: ## Create the initial configuration of .mo files for translation
	## Here we control the locales being used
	pybabel extract -F openedx_email_extensions/locale/babel.cfg -o openedx_email_extensions/locale/django.pot --msgid-bugs-address=support@edunext.co --copyright-holder=eduNEXT .
	@echo "--- If you want to add a new language add a line in the Makefile ---"
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l en  # English - Source Language
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l ar  # Arabic
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l da  # Danish
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l de_DE  # German (Germany)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l es_419  # Spanish (Latin America)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l fr  # French
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l he  # Hebrew
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l it_IT  # Italian (Italy)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l ja_JP  # Japanese (Japan)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l ko_KR  # Korean (Korea)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l pt_BR  # Portuguese (Brazil)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l ru  # Russian
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l zh_CN  # Chinese (China)
	pybabel init -i openedx_email_extensions/locale/django.pot -D django -d openedx_email_extensions/locale/ -l zh_TW  # Chinese (Taiwan)
	rm openedx_email_extensions/locale/django.pot

pip-compile: ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	pip install -q pip-tools
	pip-compile --upgrade -o requirements/base.txt requirements/base.in
	pip-compile --upgrade -o requirements/dev.txt requirements/base.in requirements/dev.in
	# pip-compile --upgrade -o requirements/doc.txt requirements/doc.in
	# pip-compile --upgrade -o requirements/quality.txt requirements/quality.in
	pip-compile --upgrade -o requirements/test.txt requirements/base.in requirements/test.in
	pip-compile --upgrade -o requirements/travis.txt requirements/travis.in
	# Let tox control the Django version for tests
	# sed '/Django==/d' requirements/test.txt > requirements/test.tmp
	# mv requirements/test.tmp requirements/test.txt

pull_translations: ## pull translations from Transifex
	# tx pull -a

push_translations: ## push source translation files (.po) from Transifex
	# tx push -s

quality: ## check coding style with pycodestyle and pylint
	# tox -e quality

requirements: ## install development environment requirements
	pip install -qr requirements/dev.txt --exists-action w
	pip-sync requirements/base.txt requirements/dev.txt requirements/private.* requirements/test.txt

test: clean ## run tests in the current virtualenv
	@echo "Not implemented"
	# py.test

test-all: ## run tests on every supported Python/Django combination
	@echo "Not implemented"
	# tox -e quality
	# tox

# validate: quality test ## run tests and quality checks
